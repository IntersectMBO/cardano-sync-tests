name: Node sync tests

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment on which Buildkite agent will run tests"
        type: choice
        options:
        - mainnet
        - preprod
        - preview
        default: preprod
      tag_no1:
        description: "Initial sync - Graph axis label"
        required: true
        default: "10.2.1"
      node_rev1:
        description: "Initial sync - cardano-node revision"
        required: true
        default: "tags/10.2.1"
      node_topology1:
        description: "Initial sync - cardano-node topology"
        type: choice
        options:
        - non-bootstrap-peers
        - bootstrap-peers
        default: non-bootstrap-peers
      node_start_arguments1:
        description: "Initial sync - Extra arguments when starting the node"
        required: false
        default: ""
      tag_no2:
        description: "Upgrade node - Graph axis label"
        required: false
        default: ""
      node_rev2:
        description: "Upgrade node - cardano-node revision"
        required: false
        default: ""
      node_topology2:
        description: "Upgrade node - cardano-node topology"
        type: choice
        options:
        - non-bootstrap-peers
        - bootstrap-peers
        default: non-bootstrap-peers
      node_start_arguments2:
        description: "Upgrade node - Extra arguments when starting the node"
        required: false
        default: ""
      use_genesis_mode:
        description: "Use Ouroboros Genesis mode"
        type: boolean
        default: false

jobs:
  node_sync_test_buildkite:
    runs-on: ubuntu-latest
    steps:
      - name: Get latest node tag
        id: get_tag
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Using manual input for tag_no1"
            echo "node_rev1=${{ github.event.inputs.node_rev1 }}" >> $GITHUB_OUTPUT
          else
            echo "Fetching latest tag for scheduled run"
            # Fetch the latest tag dynamically
            node_release_url='https://api.github.com/repos/IntersectMBO/cardano-node/releases/latest'
            latest_tag=$(curl -s $node_release_url | jq .tag_name -r)
            echo "node_rev1=$latest_tag" >> $GITHUB_OUTPUT
            # Fetch more details
            latest_name=$(curl -s $node_release_url | jq .name -r)
            latest_url=$(curl -s $node_release_url | jq .html_url -r)
            latest_archive=$(curl -s $node_release_url | jq .assets[0].browser_download_url -r)

            echo "Latest Release Name: $latest_name"
            echo "Release URL: $latest_url"
            echo "Download Archive URL: $latest_archive"
          fi

      - name: Trigger the Buildkite pipeline - run sync tests on Mainnet
        uses: 'buildkite/trigger-pipeline-action@v2.3.0'
        env:
          BUILDKITE_API_ACCESS_TOKEN: ${{ secrets.BUILDKITE_API_ACCESS_TOKEN }}
          PIPELINE: 'input-output-hk/node-sync-tests'
          BRANCH: ${{ github.ref_name }}
          MESSAGE: ':github: Triggered by GitHub Action'
          AWS_DB_USERNAME: ${{ secrets.AWS_DB_USERNAME }}
          AWS_DB_PASS: ${{ secrets.AWS_DB_PASS }}
          AWS_DB_NAME: ${{ secrets.AWS_DB_NAME }}
          AWS_DB_HOSTNAME: ${{ secrets.AWS_DB_HOSTNAME }}
          BLOCKFROST_API_KEY: ${{ secrets.BLOCKFROST_API_KEY }}
          BUILD_ENV_VARS: '{
          "env":"${{ github.event.inputs.environment }}",
          "node_rev1":"${{ steps.get_tag.outputs.node_rev1 }}",
          "node_rev2":"${{ github.event.inputs.node_rev2 }}",
          "tag_no1":"${{ github.event.inputs.tag_no1 }}",
          "tag_no2":"${{ github.event.inputs.tag_no2 }}",
          "node_topology1":"${{ github.event.inputs.node_topology1 }}",
          "node_topology2":"${{ github.event.inputs.node_topology2 }}",
          "node_start_arguments1":"${{ github.event.inputs.node_start_arguments1 }}",
          "node_start_arguments2":"${{ github.event.inputs.node_start_arguments2 }}",
          "use_genesis_mode":"${{ github.event.inputs.use_genesis_mode == \"true\" && \"-g\" || \"\" }}",
          "BLOCKFROST_API_KEY":"${{ secrets.BLOCKFROST_API_KEY }}",
          "AWS_DB_USERNAME":"${{ secrets.AWS_DB_USERNAME }}",
          "AWS_DB_PASS":"${{ secrets.AWS_DB_PASS }}",
          "AWS_DB_NAME":"${{ secrets.AWS_DB_NAME }}",
          "AWS_DB_HOSTNAME":"${{ secrets.AWS_DB_HOSTNAME }}"
          }'
